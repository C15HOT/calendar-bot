import json
import os
import logging
import datetime
from pprint import pprint
from typing import Optional

from aiogram import Bot
import pytz
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from dataclasses import dataclass, asdict

from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain
from langchain_core.prompts import ChatPromptTemplate

from app.bot.keyboards import get_auth_keyboard, get_postpone_keyboard
from app.settings import get_settings

from langchain_gigachat.chat_models import GigaChat

CREDENTIALS_FILE = os.path.join(os.path.dirname(__file__), '../../credentials.json')
USER_CREDENTIALS_DIR = "/service/user_credentials"
logging.basicConfig(level=logging.ERROR)
logger = logging.getLogger(__name__)

settings = get_settings()

llm = GigaChat(
    # –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –≤ –ø—Ä–æ–µ–∫—Ç–µ GigaChat API
    credentials=settings.gigachat_key,
    verify_ssl_certs=False,
)
DEFAULT_CALENDAR_ID = 'primary'
LOCAL_TIMEZONE = pytz.timezone('Europe/Moscow')

async def get_calendar_color(calendar_name: str) -> str:
    """
    Assigns a color to a calendar based on its name.
    """
    calendar_colors = {
        "–í–∞–∂–Ω—ã–µ —Å—Ä–æ—á–Ω—ã–µ": "üü•",
        "–í–∞–∂–Ω—ã–µ –Ω–µ—Å—Ä–æ—á–Ω—ã–µ": "üü©",
        "–ù–µ–≤–∞–∂–Ω—ã–µ —Å—Ä–æ—á–Ω—ã–µ": "üü¶",
        "–ù–µ–≤–∞–∂–Ω—ã–µ –Ω–µ—Å—Ä–æ—á–Ω—ã–µ": "üüß",
        "–ü—Ä–∞–∑–¥–Ω–∏–∫–∏ –†–æ—Å—Å–∏–∏": "üéâ",
        "dknotion@gmail.com": "üü™",  # –¶–≤–µ—Ç –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è dknotion@gmail.com
    }
    return calendar_colors.get(calendar_name, "‚¨õÔ∏è")  # Default color

async def get_creds(user_id):
    creds = None
    token_path = os.path.join(USER_CREDENTIALS_DIR, f'token_{user_id}.json')

    if os.path.exists(token_path):
        try:
            creds = Credentials.from_authorized_user_file(token_path, settings.scopes)
            logger.info(f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞: {creds.expiry}")
            logger.info(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è UTC: {datetime.datetime.now(pytz.utc)}")
            
            if creds.expired:
                logger.info(f"–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å")
                if creds.refresh_token:
                    try:
                        creds.refresh(Request())
                        with open(token_path, 'w') as f:
                            f.write(creds.to_json())
                        logger.info(f"–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    except Exception as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                        os.remove(token_path)
                        creds = None
                else:
                    logger.warning(f"Refresh —Ç–æ–∫–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    os.remove(token_path)
                    creds = None
            else:
                logger.info(f"–¢–æ–∫–µ–Ω –≤—Å–µ –µ—â–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            if os.path.exists(token_path):
                os.remove(token_path)
            creds = None
    return creds

async def get_calendar_service(user_id):
    creds = await get_creds(user_id)
    token_path = os.path.join(USER_CREDENTIALS_DIR, f'token_{user_id}.json')
    
    if not creds:
        logger.warning(f"–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return ("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ –±–æ—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∞—à–µ–º—É Google Calendar.", get_auth_keyboard())

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ refresh —Ç–æ–∫–µ–Ω
    if not creds.refresh_token:
        logger.warning(f"Refresh —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.")
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Ç–æ–∫–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ refresh —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if os.path.exists(token_path):
            os.remove(token_path)
        return ("Refresh —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ –±–æ—Ç–∞.", get_auth_keyboard())

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω –∏ –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ
    if creds.expired:
        try:
            creds.refresh(Request())
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            with open(token_path, 'w') as f:
                f.write(creds.to_json())
            logger.info(f"–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Ç–æ–∫–µ–Ω–∞
            if os.path.exists(token_path):
                os.remove(token_path)
            return ("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ –±–æ—Ç–∞.", get_auth_keyboard())

    try:
        service = build('calendar', 'v3', credentials=creds)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç, –¥–µ–ª–∞—è —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        service.calendarList().list(maxResults=1).execute()
        return service
    except HttpError as error:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {error}")
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π, —É–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω
        if error.resp.status in [401, 403]:
            if os.path.exists(token_path):
                os.remove(token_path)
            return ("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ –±–æ—Ç–∞.", get_auth_keyboard())
        return None
    except Exception as error:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {error}")
        return None

async def get_calendar_list(service):
    """
    Gets the list of calendars for the user.
    """
    try:
        calendar_list = service.calendarList().list().execute()
        calendars = calendar_list.get('items', [])
        return calendars
    except HttpError as error:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error}")
        return []

async def get_events_from_calendar(service, calendar_id, num_events=5):
    """
    Gets upcoming events from a specific calendar.
    """
    now = datetime.datetime.utcnow().isoformat() + 'Z'  # 'Z' indicates UTC time
    try:
        events_result = service.events().list(calendarId=calendar_id, timeMin=now,
                                              maxResults=num_events, singleEvents=True,
                                              orderBy='startTime').execute()
        events = events_result.get('items', [])
        return events
    except HttpError as error:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error}")
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (OAuth2 flow)
async def save_credentials(user_id, credentials):
    os.makedirs(USER_CREDENTIALS_DIR, exist_ok=True)
    token_path = os.path.join(USER_CREDENTIALS_DIR, f'token_{user_id}.json')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å refresh —Ç–æ–∫–µ–Ω
    if not credentials.refresh_token:
        logger.warning(f"Refresh —Ç–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –≠—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –ø–æ–∑–∂–µ.")
    
    try:
        with open(token_path, 'w') as token:
            token.write(credentials.to_json())
        logger.info(f"–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ {token_path}")
        logger.info(f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞: {credentials.expiry}")
        logger.info(f"–ï—Å—Ç—å refresh —Ç–æ–∫–µ–Ω: {bool(credentials.refresh_token)}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        raise

async def get_upcoming_events(user_id, num_events=5):
    service = await get_calendar_service(user_id)

    if isinstance(service, tuple): #If response is tuple
        return service
    
    all_events = []
    
    try:
        calendars = await get_calendar_list(service)
        
        if not calendars:
            return "–ö–∞–ª–µ–Ω–¥–∞—Ä–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π."

        for calendar in calendars:
            calendar_id = calendar['id']
            calendar_name = calendar['summary']  # –ò–º—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            events = await get_events_from_calendar(service, calendar_id, num_events)

            for event in events:
                start = event['start'].get('dateTime', event['start'].get('date'))
                if start:
                    start_datetime = datetime.datetime.fromisoformat(start.replace('Z', '+00:00'))
                    if start_datetime.tzinfo is None:
                        local_start_time = start_datetime.replace(tzinfo=pytz.utc).astimezone(LOCAL_TIMEZONE)
                    else:
                        local_start_time = start_datetime.astimezone(LOCAL_TIMEZONE)
                    all_events.append((calendar_name, event['summary'], local_start_time.strftime('%Y-%m-%d %H:%M')))
                    
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π: {e}")
        return []

    return all_events

async def send_event_reminders(bot: Bot):
    """
    Sends event reminders to all authorized users.
    """
    # Get the list of user IDs from the credentials directory
    user_ids = await get_all_user_ids()
    
    if not user_ids:
        logger.info("–ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        return

    now = datetime.datetime.now(LOCAL_TIMEZONE)# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å

    for user_id in user_ids:
        upcoming_events = await get_upcoming_events(user_id, num_events=5)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ upcoming_events —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º, –∞ –Ω–µ —Å—Ç—Ä–æ–∫–æ–π –æ—à–∏–±–∫–∏ –∏–ª–∏ –∫–æ—Ä—Ç–µ–∂–µ–º
        if isinstance(upcoming_events, (str, tuple)):
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {upcoming_events}")
            continue
            
        for calendar_name, event_summary, event_start_time_str in upcoming_events:
            color = get_calendar_color(calendar_name)

            event_start_time = datetime.datetime.strptime(event_start_time_str, '%Y-%m-%d %H:%M')
            event_start_time = LOCAL_TIMEZONE.localize(event_start_time)
            time_difference = event_start_time - now
            if datetime.timedelta(minutes=15) <= time_difference <= datetime.timedelta(
                    hours=2):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 15-30 –º–∏–Ω—É—Ç
                total_minutes = int(time_difference.total_seconds() / 60)

                if total_minutes < 60:
                    time_string = f"{total_minutes} –º–∏–Ω—É—Ç"
                else:
                    hours = total_minutes // 60
                    minutes = total_minutes % 60
                    time_string = f"{hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç"
                await bot.send_message(chat_id=user_id,
                                       text=f"<b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: </b> {color} {event_summary} –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ {time_string}", parse_mode="HTML", reply_markup=get_postpone_keyboard(event_id=1)) #TODO
                logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_summary}")

async def get_all_user_ids():
    """
    Gets all user IDs by listing files in the credentials directory.
    """
    user_ids = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
    if not os.path.exists(USER_CREDENTIALS_DIR):
        logger.warning(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {USER_CREDENTIALS_DIR}")
        return user_ids
        
    for filename in os.listdir(USER_CREDENTIALS_DIR):
        if filename.startswith('token_') and filename.endswith('.json'):
            try:
                user_id = int(filename.split('_')[1].split('.')[0])
                user_ids.append(user_id)
            except ValueError:
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {filename}")
    return user_ids

@dataclass
class EventDetails:
    event_summary: str
    event_description: str
    date: str
    start_time: str
    end_time: str
    calendar_id: Optional[str] = None
    calendar_name: Optional[str] = None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ Google Calendar
async def create_google_calendar_event(user_id, event_summary, event_description, start_time, end_time, calendar_id=DEFAULT_CALENDAR_ID):
    """
    Creates an event in Google Calendar.
    """
    creds = await get_creds(user_id)
    if creds is None:
      logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
      return False  # –ò–ª–∏ –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ

    try:
        service = build('calendar', 'v3', credentials=creds)

        event = {
            'summary': event_summary,
            'description': event_description,
            'start': {
                'dateTime': start_time.isoformat(),
                'timeZone': 'Europe/Moscow',  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
            },
            'end': {
                'dateTime': end_time.isoformat(),
                'timeZone': 'Europe/Moscow',  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
            },
        }

        event = service.events().insert(calendarId=calendar_id, body=event).execute()
        logger.info(f'–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ {calendar_id}: {event.get("htmlLink")}')
        return True
    except HttpError as error:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {error}")
        return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è (–û–ë–™–ï–î–ò–ù–ï–ù–ù–ê–Ø)
async def create_event_from_text(user_id, user_text):
    system_template = """
        You are a helpful assistant that extracts event details from user input.
        Given the following text, extract the event summary, event_description, date, start time, and end time.

        If the date isn't given in the text, **use the current date.**
        Try to understand what date is indicated in the user's message relative to the current date, the date can be described as the day of the week, or as an indication of tomorrow, the day after tomorrow and similar words. You need to convert this to the correct date format.
        If the time isn't given, return 'NONE'. You *MUST* have a start time. If the user provides a duration, calculate the end time.
        If there is no explicit event_description, provide a short description of what the event is.

        **Do not use dates from the past.  Any date generated must be equal to or later than the current date.**

        Return the data in the following JSON format:
        {{
          "event_summary": "...",
          "event_description": "...",
          "date": "YYYY-MM-DD",
          "start_time": "HH:MM",
          "end_time": "HH:MM"
        }}
        current date: {current_datetime}
        User Text: {user_text}
        """
    current_datetime = datetime.datetime.now().strftime("%Y-%m-%d %H:%M")

    prompt_template = ChatPromptTemplate.from_messages(
        [("system", system_template), ("user", "{user_text}")]
    )

    prompt = prompt_template.invoke({"user_text": user_text, "current_datetime": current_datetime})

    try:
        response = llm.invoke(prompt)
        response_content = response.content
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ LLM: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."

    try:
        event_data = json.loads(response_content)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        required_fields = ['event_summary', 'event_description', 'date', 'start_time', 'end_time']
        for field in required_fields:
            if field not in event_data:
                logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –≤ –æ—Ç–≤–µ—Ç–µ LLM: {field}")
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ—Ç–∞–ª–µ–π —Å–æ–±—ã—Ç–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è —è–≤–ª—è—é—Ç—Å—è —Å—Ç—Ä–æ–∫–∞–º–∏
        for field in required_fields:
            if not isinstance(event_data[field], str):
                logger.error(f"–ü–æ–ª–µ {field} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π: {type(event_data[field])}")
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ—Ç–∞–ª–µ–π —Å–æ–±—ã—Ç–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        
        try:
            event_details = EventDetails(**event_data)
        except TypeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ EventDetails: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ—Ç–∞–ª–µ–π —Å–æ–±—ã—Ç–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ EventDetails: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ—Ç–∞–ª–µ–π —Å–æ–±—ã—Ç–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        
        print(asdict(event_details))  # –í—ã–≤–æ–¥ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è

        event_summary = event_details.event_summary
        event_description = event_details.event_description
        date_str = event_details.date
        start_time_str = event_details.start_time
        end_time_str = event_details.end_time

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ –ø—É—Å—Ç–æ–µ
        if not event_summary or event_summary.strip() == "":
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ –ø—É—Å—Ç–æ–µ
        if not event_description or event_description.strip() == "":
            event_description = f"–°–æ–±—ã—Ç–∏–µ: {event_summary}"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ
        if start_time_str == "NONE" or not start_time_str:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–Ω–µ –Ω—É–∂–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è."

        try:
            date = datetime.datetime.strptime(date_str, "%Y-%m-%d").date()
        except ValueError:
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date_str}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
            tomorrow = datetime.datetime.now() + datetime.timedelta(days=1)
            date = tomorrow.date()
        except Exception as exc:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞—Ç—ã: {exc}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
            tomorrow = datetime.datetime.now() + datetime.timedelta(days=1)
            date = tomorrow.date()

        start_time = datetime.datetime.combine(date, datetime.datetime.strptime(start_time_str, "%H:%M").time())
        # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è - –ø—Ä–∏–±–∞–≤–ª—è–µ–º —á–∞—Å
        if end_time_str == "NONE" or not end_time_str:
            end_time = start_time + datetime.timedelta(hours=1)
        else:
            try:
                end_time = datetime.datetime.combine(date, datetime.datetime.strptime(end_time_str, "%H:%M").time())
            except ValueError:
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_time_str}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ + 1 —á–∞—Å")
                end_time = start_time + datetime.timedelta(hours=1)

        # 6. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π
        creds = await get_creds(user_id)
        if creds is None:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."

        service = build('calendar', 'v3', credentials=creds)
        available_calendars = await get_calendar_list(service)
        
        if not available_calendars:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            calendar_id = DEFAULT_CALENDAR_ID
            calendar_name = '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π'
        else:
            # 7. –í—ã–±–æ—Ä –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            calendar_id = await choose_calendar(event_summary, event_description, available_calendars)
            print('\n')
            print(calendar_id)
            print('\n')
            calendar_name = next((cal['summary'] for cal in available_calendars if cal['id'] == calendar_id), "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π")
            if not calendar_id:
                calendar_id = DEFAULT_CALENDAR_ID
                calendar_name = '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π'
        # 8. –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
        print('\n')
        print(calendar_id)
        print(calendar_name)
        print('12312312312312312312')
        print('\n')
        event_details.calendar_id = calendar_id
        event_details.calendar_name = calendar_name
        event_details.start_time = start_time
        event_details.end_time = end_time
        return event_details
        # success = await create_google_calendar_event(user_id, event_summary, event_description, start_time, end_time, calendar_id)
        #
        # if success:
        #     # –ù–∞—Ö–æ–¥–∏–º –∏–º—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø–æ –µ–≥–æ ID
        #     calendar_name = next((cal['summary'] for cal in available_calendars if cal['id'] == calendar_id), "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π")
        #     return f"Event created in {calendar_name} calendar."
        # else:
        #     return "Sorry, there was an error creating the event."

    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}, –û—Ç–≤–µ—Ç: {response}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –ø–æ–Ω—è—Ç—å –¥–µ—Ç–∞–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å."
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏–ª–∏ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç."
    except Exception as e:
        logger.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
async def choose_calendar(event_summary, event_description, available_calendars):
    """
    Chooses the most appropriate calendar based on event summary, description, and available calendars.
    """

    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM
    # llm = OpenAI(openai_api_key=OPENAI_API_KEY, temperature=0.5) #–£–º–µ–Ω—å—à–∏–ª temperature –¥–ª—è –±–æ–ª—å—à–µ–π –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç–∏

    # 2. –°–æ–∑–¥–∞–Ω–∏–µ prompt template
    template = """
    You are a helpful assistant that selects the best Google Calendar to put an event into.

    Given the following event summary and description, and a list of Google Calendars with their names, choose the *single best* calendar for the event.

    Your answer *MUST* be the *EXACT* name of one of the available calendars. If none of the calendars are appropriate, return "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π".

    Event Summary: {event_summary}
    Event Description: {event_description}

    Available Calendars:
    {calendar_list}

    Best Calendar:
    """

    prompt = PromptTemplate(template=template, input_variables=["event_summary", "event_description", "calendar_list"])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π –¥–ª—è prompt
    calendar_names = [calendar['summary'] for calendar in available_calendars]
    calendar_list_str = "\n".join(calendar_names)

    # 3. –°–æ–∑–¥–∞–Ω–∏–µ LLM Chain
    llm_chain = LLMChain(prompt=prompt, llm=llm)

    # 4. –ó–∞–ø—É—Å–∫ LLM Chain
    try:
        chosen_calendar_name = llm_chain.run({"event_summary": event_summary, "event_description": event_description, "calendar_list": calendar_list_str})
        chosen_calendar_name = chosen_calendar_name.strip()  #–£–¥–∞–ª–∏—Ç–µ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        return DEFAULT_CALENDAR_ID

    logger.info(f"–í—ã–±—Ä–∞–Ω–Ω–æ–µ –∏–º—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {chosen_calendar_name}")

    # 5. –ü–æ–∏—Å–∫ calendar_id –ø–æ –∏–º–µ–Ω–∏
    pprint(chosen_calendar_name)

    if not chosen_calendar_name:
        return DEFAULT_CALENDAR_ID
    for calendar in available_calendars:
        if calendar['summary'] == chosen_calendar_name:
            return calendar['id']

    logger.warning(f"–ö–∞–ª–µ–Ω–¥–∞—Ä—å '{chosen_calendar_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
    return DEFAULT_CALENDAR_ID  # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π

async def check_token_health(user_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –µ–≥–æ –∑–¥–æ—Ä–æ–≤—å–µ.
    """
    creds = await get_creds(user_id)
    if not creds:
        return "no_token", "–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    if not creds.refresh_token:
        return "no_refresh", "Refresh —Ç–æ–∫–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    
    if creds.expired:
        try:
            creds.refresh(Request())
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            token_path = os.path.join(USER_CREDENTIALS_DIR, f'token_{user_id}.json')
            with open(token_path, 'w') as f:
                f.write(creds.to_json())
            return "refreshed", "–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return "refresh_failed", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω: {e}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    time_until_expiry = creds.expiry - datetime.datetime.now(pytz.utc)
    if time_until_expiry.total_seconds() < 3600:  # –ú–µ–Ω—å—à–µ —á–∞—Å–∞
        return "expiring_soon", f"–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {int(time_until_expiry.total_seconds() / 60)} –º–∏–Ω—É—Ç"
    
    return "healthy", "–¢–æ–∫–µ–Ω –≤ –ø–æ—Ä—è–¥–∫–µ"

async def monitor_tokens(bot: Bot):
    """
    –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö.
    """
    user_ids = await get_all_user_ids()
    
    if not user_ids:
        logger.info("–ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–æ–≤")
        return
    
    for user_id in user_ids:
        status, message = await check_token_health(user_id)
        
        if status in ["no_token", "no_refresh", "refresh_failed"]:
            try:
                await bot.send_message(
                    chat_id=user_id,
                    text=f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π: {message}\n\n"
                         f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞.",
                    reply_markup=get_auth_keyboard()
                )
                logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {message}")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ —Å —Ç–æ–∫–µ–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        elif status == "expiring_soon":
            try:
                await bot.send_message(
                    chat_id=user_id,
                    text=f"‚ÑπÔ∏è –í–∞—à —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç: {message}\n\n"
                         f"–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç –µ–≥–æ, –Ω–æ –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º—ã, "
                         f"–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
                )
                logger.info(f"–¢–æ–∫–µ–Ω —Å–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {message}")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")